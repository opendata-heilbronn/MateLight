var chai = require('chai');
var expect = chai.expect;
var Materix = require('./../src/materix.module');
const Pixel = require('../src/models/pixel.model');
var Hardware = require('./../src/materixHardware.module');

describe('Materix Module', function () {
    var materix = null;
    var width = 2;
    var height = 2;
    var pixelArraySize = width * height * 20;

    const ledMap = [ //this led map should be generated by
        [ 43, 44, 51, 52, 59, 63, 64, 71, 72, 79 ],
        [ 42, 45, 50, 53, 58, 62, 65, 70, 73, 78 ],
        [ 41, 46, 49, 54, 57, 61, 66, 69, 74, 77 ],
        [ 40, 47, 48, 55, 56, 60, 67, 68, 75, 76 ],
        [ 39, 32, 31, 24, 23, 19, 12, 11,  4,  3 ],
        [ 38, 33, 30, 25, 22, 18, 13, 10,  5,  2 ],
        [ 37, 34, 29, 26, 21, 17, 14,  9,  6,  1 ],
        [ 36, 35, 28, 27, 20, 16, 15,  8,  7,  0 ]
    ];



    beforeEach(function () {
        var hardware = new Hardware({serialDevice: '/dev/serial0', baudRate: 1000000});
        materix = new Materix({width: width, height: height, orientation: "landscape", handler: hardware});
    });

    it('should have an instance', function () {
        expect(materix).to.not.be.null;
    });

    it('should be have a width of ' + width, function () {
        expect(materix.getWidth()).to.equal(width);
    });

    it('should be have a height of ' + height, function () {
        expect(materix.getHeight()).to.equal(height);
    });

    it('should have a pixel array with the size ' + pixelArraySize, function () {
        var pixels = materix.getPixels();

        var pixelsSize = pixels.length * pixels[0].length; //calculate size of 2D Array
        expect(pixelsSize).to.equal(width * height * 20);
    });

    it('should set pixel', function () {
        var options = {
            color: {red: 255, green: 123, blue: 42},
            position: {x: 0, y: 0}
        };
        var pixel = new Pixel(options);

        expect(materix.setPixel.bind(materix, pixel)).to.not.throw('pixel is not valid');

        var pixels = materix.getPixels();
        var isPixel = JSON.stringify(pixels[0][0]);
        var shouldPixel = JSON.stringify([options.color.red, options.color.green, options.color.blue]);
        expect(isPixel).to.equal(shouldPixel);
    });

    it('should generate correct led mapping', function () {
        var shouldMap = JSON.stringify(ledMap);
        var isMap = JSON.stringify(materix.getLedMap());
        expect(isMap).to.equal(shouldMap);
    });

    it('should send out the correct data', function() {
        //TODO: implement
        /*for(var i = 0; i < 60; i++) {
            materix.setPixel({position: {x: i%10, y: Math.floor(i/10)}, color: {red: i*3, green: i*3+1, blue: i*3+2}});

        }
        materix.send();*/
    })
});